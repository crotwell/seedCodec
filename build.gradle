
plugins {
  id "edu.sc.seis.version-class" version "1.1.1"
  
}

dependencies {
    testImplementation 'junit:junit:4.12'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'edu.sc.seis'
version = '1.0.12-SNAPSHOT'

signing {
    sign configurations.archives
}
test {
    useJUnit()
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: hasProperty('ossrhUsername')?ossrhUsername:'', password: hasProperty('ossrhPassword')?ossrhPassword:'')
      }

      pom.project {
        name 'SeedCodec'
        packaging 'jar'
        // optionally artifactId can be defined here
        description 'A collection of compression and decompression routines for standard seismic data formats in Java.'
        url 'http://www.seis.sc.edu/seedCodec.html'

        scm {
          connection 'scm:git:https://github.com/crotwell/seedCodec.git'
          developerConnection 'scm:git:https://github.com/crotwell/seedCodec.git'
          url 'https://github.com/crotwell/seedCodec'
        }

        licenses {
          license {
            name 'The GNU General Public License, Version 3'
            url 'http://www.gnu.org/licenses/gpl-3.0.html'
          }
        }

        developers {
          developer {
            id 'crotwell'
            name 'Philip Crotwell'
            email 'crotwell@seis.sc.edu'
          }
        }
      }
    }
  }
}

task tarDist(type: Tar, dependsOn: ['copyToLib', 'javadoc', 'mywrapper', 'createBuildScript']) {
    def dirName = project.name+'-'+version
    compression = Compression.GZIP
    from('build/output') {
        include('bin/**')
        include('lib/**')
        into dirName
    }
    from('build/docs') {
        include('javadoc/**')
        into dirName
    }
    from('.') {
        include('gpl-3.0.txt')
        include('readme.txt')
        include('doc/**')
        include('src/**')
        include('gradleWrapper/**')
        include('gradlew')
        include('gradlew.bat')
        exclude('**/*.svn')
        into dirName
    }
    from('build') {
        fileMode=0755
        include('build.gradle')
        into dirName
    }
}

assemble.dependsOn(tarDist)
